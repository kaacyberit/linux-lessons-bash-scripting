#!/bin/more
==============================
SCRIPT NAME: 1_hello_user.sh 
==============================
#!/bin/bash
# bash script - set of bash commands composed in one file. Script file must have an execution bit set! "chmod u+x [filename]"
# fist line of script file called SHEBANG - represent shell that will process this script file
# Text starts with # sign up to the end of line - is COMMENT

# 0 - comments
# this is a comment. it begins from sign # till to the end of the line


# 1 - lets clear the screen for better view and print info about system. for this use regular command "clear"
# and lets print some message/text using echo command
clear # this is also a comment
echo "Hello script world!"
echo "======================================="
echo "Info about system:"
uname -a # print info about system that you work on
echo String without quotes # in most cases it works fine. But more correct way its to use quotes
echo "String with quotes"
echo ""
echo ""


# 2 - to interpret text as command/sub-command and not as text, and to get command execution results you must write command in back-ticks (at the tilda button)
# results you can use as text for output inside echo statements or as variable value.
# without back-ticks shell interpret text as direct text to display or direct value to store in variable.
# with back-ticks shell interpret text as command to execute
echo "Sub commands results"
echo "======================================="
echo "Today is: date"   # display date as text
echo "Today is: "date   # display date as text
echo "Today is: `date`" # interprets date as command to execute an display command results
echo "Today is: "`date` # interprets date as command to execute an display command results
echo ""
echo ""


# 3 - special characters and two types of quotes
# some of the characters bash interprets as those that has special meaning.
# for example quotes. echo command print all that INSIDE the quotes, but not the quotes themselves.
# if you want to print quotes inside the message you have to "escape" it with "\" sign. 
# escape symbol act only for one symbol after. If you want to print more then one special symbol you need to escape each one.
# escape symbol can be escaped to.
# there is two types of quotes: 
# - double quotes (") - week quotes. shell will parse text in this quotes and replace variable with its values, run expressions and so on.
# because of that behavior, if you'd like to use special characters in text, those characters need to be ESCAPED with "\" symbol. 
# - single quotes (') - strong quotes. shell will NOT parse/interpret text in this quotes and will print it as is.
echo "Special characters and quotes in scripts"
echo "======================================="
echo "Print one quote - \", 5 quotes - \"\"\"\"\""
echo "Print one escape symbol - \\"
echo "To print 5 escape symbols at console we need to write 10 those symbols at script - \\\\\\\\\\"
echo ""
echo "same text inside soft and hard quotes"
echo "Hello (\`date\`) `date`" # character ' escaped with \ to print correctly
echo 'Hello (\`date\`) `date`' # text prints as is with all special characters
echo ""
echo "Combinations of quotes"
echo "Hello ('\`date\`') `date`"
echo 'Hello ("\`date\`") `date`'
echo ""
echo ""


# 4 - lets print some message/text with variables using echo command
# in linux system we have predefined variables. Some of them we can see with "env", "printenv", "set" or "export" command.
# but it is possible to get only one (that you needed right now) from them with "$" sign.
# and we can use those variables in scripts to customize scripts behavior.
# by default variable written in CAPS. And to get variable value you need to use $ before variable name. 
echo "Display some environment variables"
echo "======================================="
echo "Hello (env \$USER) $USER" # character $ escaped with \ to print correctly
echo "your home dir is: $HOME"
echo ""
echo ""


# 5 - you can set and use you own variables. To make it write variable name (without spaces) than "=" sign and variable value. All without spaces! (varname=varvalue)
# if you have spaces in variable value - place value in quotes ""
# And to get variable value you need to use $ before variable name.
MYNAME="Johnathan the III"
echo "Own variables"
echo "======================================="
echo "Hello $MYNAME" # character $ escaped with \ to print correctly
echo 'Hello $MYNAME' # text prints as is with all special characters
echo ""
TODAYSDATE=date # the value of TODAYSDATE will be date
echo "Today is: $TODAYSDATE"
TODAYSDATE=`date` # the value of TODAYSDATE will be RESULT of date command
echo "Today is: $TODAYSDATE"
#echo ""
#LSDIR=`ls`
#echo "Directory listing: $LSDIR"
#echo "Directory listing: `ls`"
#echo "Directory listing:"`ls`
echo ""
echo ""


# 6 - special reserved variable names $0 $1 $2.... 
# when you run a script you can run with parameters. first of all type a script name then space then first parameter, then space then 2-nd parameter, and so on.
# parameters must be separated with spaces. 
# if your parameter contains spaces - write it in quotes
# example: script_name parameter_1 "parameter two" and so on. 
# script can get those parameters thru special variable names like $0 $1 $2.
# $0 - returns script name itself, $1 - returns first parameter value, $2 - returns second parameter value, and so on. 
echo "Parameter variables"
echo "======================================="
echo "Script name is: $0"
echo "Parameter 1 is: $1" 
echo "Parameter 2 is: $2"
echo ""
echo ""


# 7 - user input values
# you can ask user to input some value and the you can use it as normal/regular variable
# read command
echo "User input variables"
echo "======================================="
echo "Enter your name"
read USERNAME
echo "Enter your age"
read USERAGE
echo "Hello $USERNAME! You are $USERAGE years old." 
echo ""
echo ""


# 8 - we can use simple mathematical expressions in scripts. 
# shell interprets some symbols like special characters, there for they should be escaped with "\" symbol 
echo "Arithmetical expressions in scripts"
echo "======================================="
echo "1 + 1 = `expr 1 + 1`"
echo "1 + 1 = "`expr 1 + 1`
echo "1 * 1 = `expr 1 \* 1`"
echo "1 * 1 = "`expr 1 \* 1`
echo "2 + 2 * 2 = "`expr 2 + 2 \* 2`
echo "(2 + 2) * 2 = "
expr \( 2 + 2 \) \* 2 # or without backticks but with new line
echo ""
# we can use existing variables to calculate or to "convert" them
echo "You are `expr $USERAGE \* 52` weeks old"
echo "If you want to live up to 100 years, so you have left `expr 5200 - $USERAGE \* 52` weeks"
echo ""
echo ""


# 9 - Command Substitution
# if we need to reuse some of the code/text inside the script 
# one approach for this is variables, but we can use other approach for this task.
# we can write code once with some short name and reuse it as many times as we need it.
# in terms of bash it calls "alias" and in modern languages it calls "macros"
# example: alias begins with predefined word "alias"...
# alias aliasname="COMMAND that will be inserted when you use aliasname in code"
# aliasname becomes new command and to get result of this command you need to use backticks
# but here is one trick:
# by default aliases has to be written in .bash_rc or .bash_profile file inside you home directory
# and by default they roll-out ONLY during LOGIN process.
# to execute bash script it starts new sub-shell and by default aliases are not expand at sub-shells as there is no login process.
# to "fix" it we can use shopt command
echo "Alias Command Substitution"
echo "======================================="
shopt -s expand_aliases
# lets change date command output format
alias  TODAYIS="date +%Y-%m-%d--%H-%M-%S"
echo "Today is: `TODAYIS`" # using alias direct in echo
TODAY=`TODAYIS`           # using alias for variable
echo "Today is: $TODAY"
echo ""
echo ""


# 10 - variable types (Implicit vs. Explicit Definition)
# by default variables is implicitly determine by its value. integer with number, string with sting
# to declare/undeclare variable Explicitly or to view variable type use "declare" command
# shell automatically try to convert Implicitly defined variables to type that expression expect
echo "Variable types"
echo "======================================="
IMPLICITVAR=4
declare -p IMPLICITVAR # view var type 
IMPLICITVAR2="string"
declare -p IMPLICITVAR2 # view var type 
# IMPLICITVAR and IMPLICITVAR2 has the same type - string
# but when we try to use them in some expressions some of can be converted
echo "`expr 5 + $IMPLICITVAR`"  # will convert var to integer as expression expects
echo "`expr 5 + $IMPLICITVAR2`" # will NOT convert var to integer because it can't
# implicit declaration gives us ability to change value and TYPE automatically over time
IMPLICITVAR="new string"
declare -p IMPLICITVAR # view var type 
echo ""
declare -i EXPLICITVAR=4 # declare var as integer
declare -p EXPLICITVAR # view var type 
# with explicitly declared variables with TYPE there is no ability to change type automatically
EXPLICITVAR=23 # i can reassign new value with same type (integer in this example)
declare -p EXPLICITVAR # view var type 
EXPLICITVAR="explicit string" # this will throw an error because i can not reassign new value with other type (string in this example)
declare -p EXPLICITVAR # view var type - it will be the same as declared
echo ""
# if declare variable without type flag - its equal to implicit declaration
declare EXPLICITVAR2=4 # declare var as integer
declare -p EXPLICITVAR2 # view var type 
# with explicitly declared variables with TYPE there is no ability to change type automatically
EXPLICITVAR2=23 # i can reassign new value with same type (integer in this example)
declare -p EXPLICITVAR2 # view var type 
EXPLICITVAR2="explicit string" # now i can reassign new value with other type (string in this example)
declare -p EXPLICITVAR2 # view var type - it will be the same as declared
echo ""
declare +i EXPLICITVAR=4 # undeclare var type
declare -p EXPLICITVAR # view var type 
EXPLICITVAR="explicit string" # now i can reassign new value with other type (string in this example)
declare -p EXPLICITVAR # view var type
echo ""
declare -r READONLYVAR="String, that can not be overwritten" # undeclare var type
declare -p READONLYVAR # view var type 
READONLYVAR="explicit string" # can not be overwritten
declare -p READONLYVAR # view var type
declare +r READONLYVAR # can not be undeclared
declare -p READONLYVAR # view var type 
# "declare -r" is equal to "readonly"
readonly READONLYVAR2="String, that can not be overwritten" # undeclare var type
declare -p READONLYVAR2 # view var type 
echo ""
echo ""


# 11 - arrays
echo "Arrays"
echo "======================================="
NEWARRAY=("first" "Second" "Third") # array elements in quotes space separated
echo ${NEWARRAY[0]}
echo ${NEWARRAY[1]}
echo ${NEWARRAY[2]}
echo ""
echo "print all elements at once"
echo ${NEWARRAY[*]}
echo ""
echo "add forth element and print all at once"
NEWARRAY[3]="Fourth"
echo ${NEWARRAY[*]}
echo ""
echo "print all element one by one with for loop"
#NEWARRAY2=(....
COUNT=0
for INDEX in ${NEWARRAY[@]}; # @ - special character in array that represents "all elements in array"
do
	echo "Processing Element: ${NEWARRAY[COUNT]}"
	COUNT="`expr $COUNT + 1`"
done
echo ""
echo ""


# make some pause before exit
echo "press ENTER to exit"
read
==============================
SCRIPT NAME: 2_conditions.sh 
==============================
#!/bin/bash
# condition statements, cases, loops
clear


## 1 - statements - simple if/then
# take an attention that before and after brackets have to be space! [ condition ]
echo "Statements - simple if/then"
echo "============================================================================================"
echo ""
echo "Enter a number between 1 and 10 and try to guess the secret number"
read GUESSNUM
if [ $GUESSNUM -eq 7 ]
  then
    echo "You have WEEN !!!"
fi
echo ""
echo ""


## 2 - statements - if/then/else
# you can use it without else block. in such case if conditions in if brackets is true it will execute everything tat inside "then".
# if not - script will go forward
echo "Statements - if/then/else"
echo "============================================================================================"
echo ""
echo "Enter a number between 1 and 10 and try to guess the secret number"
read GUESSNUM
if [ $GUESSNUM -eq 7 ]
  then
    echo "You have WEEN !!!"
  else
    echo "FALSE! you have loose :("
fi
echo ""
echo ""
echo "Statement if/then/else to test files (in this example \"file.txt\")"
echo "============================================================================================"
echo ""
FILENAME="file.txt"
#FILENAME=$1
#if [ -e $FILENAME ] # to test file existance use -e -a -f
#if [ ! -e $FILENAME ] # to test file NOT existance use -e -a -f
if [ -e $FILENAME ] && [ -w $FILENAME ]  # to test file existance use -e -a -f and  writeable
  then	# if stetament is TRUE
    echo "File $FILENAME does exists and writeable!"
  else	# if stetament is FALSE
    echo "File $FILENAME does NOT exist"
fi
echo ""
echo ""


## 3 - Statements - if/then/elif/else
echo "Statements - if/then/elif/else"
echo "============================================================================================"
echo ""
echo "Enter a number between 1 and 3:"
read VALUE
if [ "$VALUE" -eq "1" ] 2>/dev/null; then
echo "You entered #1"
elif [ "$VALUE" -eq "2" ] 2>/dev/null; then
echo "You successfully entered #2"
elif [ "$VALUE" -eq "3" ] 2>/dev/null; then
echo "You entered the 3rd number"
else
echo "You didn't follow the directions!"
fi
echo ""
echo ""



## 4 - Statements - FOR loop
echo "Statements - FOR loop"
echo "============================================================================================"
echo ""
echo "List all the shell scripts contents of the directory"
SHELLSCRIPTS=`ls *.sh`
for SCRIPT in "$SHELLSCRIPTS"; do
  DISPLAY="`cat $SCRIPT`"
  echo "File: $SCRIPT - Contents $DISPLAY"
done
echo ""
echo ""


## 5 - Statements - CASE"
echo "Statements - CASE"
echo "============================================================================================"
echo ""
echo "MAIN MENU"
echo "=================="
echo "1) Choice One"
echo "2) Choice Two"
echo "3) Choice Three"
echo ""
echo "Enter your choice:"

read MENUCHOISE

case $MENUCHOISE in
  1)
    echo "Option ONE" 
    ;;
  2)
    echo "Option TWO"
    ;;
  3)
    echo "Option THREE"
    ;;
  *) # default option if nothing choose 
    echo "You've chosen unwisely"
    ;;
esac
echo ""
echo ""


## 6 - Statements - WHILE loop
echo "Statements - WHILE loop"
echo "============================================================================================"
echo ""
echo "How many times do you want to display \"Hello world\"?" 
read DISPLAYCOUNT
COUNT=1

while [ $COUNT -le $DISPLAYCOUNT ] # le less then on equal
do
  echo "Hello world - $COUNT"
  COUNT="`expr $COUNT + 1`"
done
echo ""
echo ""


## 7 - Unary operations
echo "Unary operations"
echo "============================================================================================"
echo "Enter a number between 1 and 5: "
read VALUE
if [ "$VALUE" -eq "1" ] || [ "$VALUE" -eq "3" ] || [ "$VALUE" -eq "5" ];
then
echo "You entered the ODD value of $VALUE"
else
echo "You entered a value of $VALUE"
fi


## 8 - Unary operations 2
echo "Unary operations 2"
echo "============================================================================================"
rm superpuper 2> /dev/null && echo "File exists and was removed" || echo "File does not exist and cannot be deleted"
echo ""
echo ""


## make some pause before exit
echo "press ENTER to exit"
read
==============================
SCRIPT NAME: 3_reading_files.sh 
==============================
#!/bin/bash
# reading files
clear


## 1 - Simple read file
echo "Simple read file"
echo "============================================================================================"
echo "Enter a filename to read: "
read FILE

## if in $1 param no filename ask user to enter filename
#FILE=$1
#if [ "$FILE" == "" ] 
#  then 
#    echo "Enter a filename to read: " 
#    read FILE
#fi

## try to implement the same as above but with unary operations
#[ "$1" != "" ] && FILE=$1 || echo "Enter a filename to read:" && read FILE
#[ "$1" != "" ] || echo "Enter a filename to read:" && FILE=$1 || read FILE

echo "Filename is: $FILE"
# read file and display lines with additional info
while read -r SUPERHERO; do
echo "Superhero Name: $SUPERHERO"
done < "$FILE"
echo ""
echo ""


## 2 - Reading file using file descriptors
echo "Reading file using file descriptors"
echo "============================================================================================"
#echo "Enter a filename to read: "
#read FILE

## if in $1 param no filename ask user to enter filename
#FILE=$1
#if [ "$FILE" == "" ] 
#  then 
#    echo "Enter a filename to read: " 
#    read FILE
#fi

# open a new file descriptor
# < read
# > write
exec 5<>$FILE

# read file and display lines with additional info
while read -r SUPERHERO; do
echo "Superhero Name: $SUPERHERO"
done <&5

# write to file
echo "File was read at `date`" >&5

# close file descriptor
exec 5>&-
echo ""
echo ""


## 3 - Reading file with custom delimiter
echo "Reading file with custom delimiter"
echo "============================================================================================"
echo "Enter a filename to read: "
read DFILE
# set a new delimiter 
echo "Enter the Delimiter"
read DELIM
IFS="$DELIM"

# read file and display lines with additional info
while read -r CPU RAM HDD; do
echo "CPU: $CPU"
echo "RAM: $RAM"
echo "HDD: $HDD"
done < "$DFILE"


## make some pause before exit
echo "press ENTER to exit"
read
==============================
SCRIPT NAME: 4_errdebug.sh 
==============================
#!/bin/bash
# Debugging and Error Handling:

clear

## 1 - Debugging scripts
# there is two options:
# run bash with debugging option on: bash -x scriptname.sh
# or enable/disable debugging for part of script inside script itself. 
## "set -x" enables debugging. at the top of script for debugging all script. or for part of the code.
## "set +x" DISables debugging

echo "Statement simple if/then"
echo "============================================================================================"
echo ""
echo "Enter a number between 1 and 10 and try to guess the secret number"
set -x  # enable debugging
read GUESSNUM
if [ $GUESSNUM -eq 7 ]
  then
    echo "You have WEEN !!!"
fi
set +x  # DISables debugging
echo ""
echo ""


## 2 - Exit status
# each command leaves a trace in the system whether the command was successful or not - this called exit status.
# we can use those exit statuses to change behavior our script
# we can get it thru special variable - $?
# if it returns 0 - command ended successfully 
# if it returns NOT 0 - some error was occurred
#
# by default scripts executes line by line just skipping errors
# but if your script values or script behavior depend from other values
# and this "other values" can be without correct value due to an error
# this can cause serious problems
# one way you can check exit statuses for each command (or only for important/dangerous commands) and decide whether or not to continue script execution
# or you can set option to abort script as soon as error occurred. it makes with "set -e" command
#
#set -e   # enables an option to abort script as soon as error occurred
echo "Exit status \(set -e\)"
echo "============================================================================================"
echo "Today is:"
date
echo "Exit status of last date command is: $?"
echo "remove nonexisting file"
rm sdfsdgasfgafgasfgasfg
echo "Exit status of last rm command is: $?"
echo "1 + 1 = `expr 1 + 1`"
echo "Exit status of last expr command is: $?"
echo ""
echo ""


echo "Exit status - manual error handling"
echo "============================================================================================"
echo "change to a directory and list the contents"
DIR=$1
cd $DIR
if [ "$?" = "0" ]
then
  echo "Directory exists. Its content below:"
  echo "`ls -al`"
else
  echo "There is no such directory. exiting with error"
  exit 1 # !!!!! aborting script and set non zero exit status
fi
echo ""
echo ""


## 3 TRAP an events
echo "TRAP an events"
echo "============================================================================================"
# with trap we can catch system signals (SIGINT SIGTERM SIGTSTP), commands...
# trap 'command to do when trap event happens' trap_commands trap_signals
# SIGINT - ctrl+c
# SIGTERM - kill command
# SIGTSTP - ctrl+z
trap 'echo " - Press q/Q to Exit!"' SIGINT SIGTERM SIGTSTP

# display simple menu
while [ "$CHOISE" != "q" ] && [ "$CHOISE" != "Q" ];
do
echo "MAIN MENU"
echo "=================="
echo "1) Choise One"
echo "2) chiose TWO"
echo "3) Choise Three"
echo "Q) Quit/Exit"
echo ""
echo "enter your choise:" 
read CHOISE
clear
done
echo ""
echo ""


## make some pause before exit
echo "press ENTER to exit"
read
==============================
SCRIPT NAME: 5_bash_functions.sh 
==============================
#!/bin/bash
# bash functions
# funtion_name, space, () brackets, {} curly brackets
# funcExample () {function code here}
# - functions CAN NOT be empty or only with comment
# - functions must be defined before you called it (it means function definition writes higher at script than function calls)
# - you can define function in single line, then you MUST use space after "{" and ";" at end of each line. Even if there is only one line
# - to call function write function name
clear

## 1 - minimal function
echo "Minimal functions"
echo "============================================================================================"
funcMinimal () {
  : # shortcut for NULL operation
}

funcMinimalOneLine () { null;}
echo ""
echo ""


## 2 - bash script structure
#
## script global variables
# here write your variables
#
## Function definitions
# here write your functions
# funcOne () {}
#
## Script itself
# script code
##########################################################
echo "bash script structure"
echo "============================================================================================"
## script global variables
VAR1=$1
#
## Function definitions

funcOne () {
  echo "Text output from function One $VAR1"
}
funcTwo () {
  echo "Text output from function Two"
}
#
## Script itself
echo "beginning of the script"
funcOne # function call
echo ""
echo ""



## 3 - variable scope (visibility)
echo "Variable scope (visibility)"
echo "============================================================================================"
## script global variables
GLOBALVAR="Globally Visible"
# function definitions - start
# sample function for function variable scope
funcVarScope () {
# local variable to the function
LOCALVAR="Locally Visible"
echo "LOCALVAR From within the function, the variable is $LOCALVAR..."
echo "GLOBALVAR From within the function, the variable is $GLOBALVAR..."
}
# functions definitions - stop
# script - start
echo "This step happens first..."
echo ""
echo "GLOBAL variable = $GLOBALVAR (before the function call)"
echo "LOCALVAR variable = $LOCALVAR (before the function call)"
echo ""
echo "Calling example Function - funcVarScope()"
echo ""
funcVarScope
echo ""
echo "Function has been called..."
echo ""
echo "GLOBAL variable = $GLOBALVAR (after the function call)"
echo "LOCALVAR variable = $LOCALVAR (after the function call)"
echo ""
echo ""


## 4 - functions with parameters
# parameters passed to script ($1 $2 ...) is NOT visible from function
# to make them visible you need to create global variable and assign to it a value of script parameter
# PARAM1=$1 - now variable PARAM1 is visible from function, and its value equal $1
# passing parameters to function is equal to passing parameters to script
# call function and then parameters space delimited
echo "functions with parameters"
echo "============================================================================================"
# global variable
USERNAME=$1
#
# function definitions - start
# calculate age in days
funcAgeInDays () {
# $1 - will be the 1-st parameter passed to function
echo "Hello $USERNAME, You are $1 Years Old."
echo "That makes you approximately `expr $1 \* 365` days old..."
}
# function definitions - stop
#
# scrip - start
clear
echo "Enter Your Age: "
read USERAGE
# calculate the number of days
funcAgeInDays $USERAGE  # call function with 1 parameter passed to it. from the function perspective it will be parameter $1
echo ""
echo ""


## 5 - nested functions (additional way to organize scripts)
echo "Nested functions"
echo "============================================================================================"
# global variable
GENDER=$2
# function definitions - start
# create a human being
funcHuman () {
  ARMS=2
  LEGS=2
  echo "A Human has $ARMS arms and $LEGS legs - but what gender are we?"
  echo ""
  funcHuman.Male () {
    BEARD=1
    echo "This man has $ARMS arms and $LEGS legs, with $BEARD beard(s)..."
    echo ""
  }
  funcHuman.Female () {
    BEARD=0
    echo "This woman has $ARMS arms and $LEGS legs, with $BEARD beard(s)..."
    echo ""
  }
}
# function definitions - stop
# script - start
#clear
echo "Determining the characteristics of the gender $GENDER"
echo ""
# determine the actual gender and display the characteristics
if [ "$GENDER" == "m" ]; then
funcHuman
funcHuman.Male
else
funcHuman
funcHuman.Female
fi
echo ""
echo ""


## 6 - functions returns and exit
echo "Functions returns and exit"
echo "============================================================================================"
# global variable
YES=0
NO=1
FIRST=$1
SECOND=$2
THIRD=$3
# function definitions - start
# check the command line parameters passed in
funcCheckParms () {
  # did we get three?
  # if 3-rd param is not 0 then we have at least 3 params at script
  if [ ! -z "$THIRD" ]; then
    echo "We got three parms..."
    return $YES # custom return value of the function
  else
    echo "We did not get three parms..."
    return $NO # custom return value of the function
  fi
}
# function definitions - stop# script - start
funcCheckParms
RETURN_VALS=$?
# did we get three or not?
if [ "$RETURN_VALS" -eq "$YES" ]; then
  echo "We received three parms and they are: "
  echo "Parm 1: $FIRST"
  echo "Parm 2: $SECOND"
  echo "Parm 3: $THIRD"
  echo ""
else
  echo "Usage: $0 [parm1-name] [parm2-gender] [parm3-age]"
  exit 1 # stop/brake script execution with custom exit code 
fi
echo ""
echo ""


## make some pause before exit
echo "press ENTER to exit"
read
==============================
SCRIPT NAME: 6_infobox.sh 
==============================
#!/bin/bash
# demo of a simple info box with dialog and ncurses
# sudo apt-get install dialog

clear

# global variables / default values
INFOBOX=${INFOBOX=dialog}
MSGBOX=${MSGBOX=dialog}
MENUBOX=${MENUBOX=dialog}
INPUTBOX=${INPUTBOX=dialog}
TITLE="Default"
MESSAGE="Something to say"
XCOORD=10
YCOORD=20
# function declarations - start
# display the infobox and our message
funcDisplayInfoBox () 
{
  $INFOBOX --title "$1" --infobox "$2" "$3" "$4"
  sleep "$5"
}

funcDisplayMsgBox () 
{
  $MSGBOX --title "$1" --msgbox "$2" "$3" "$4"
}

funcDisplayMenuBox () 
{
  $MENUBOX \
  --title "[ M A I N   M E N U ]" \
  --menu "Use UP/DOWN Arrows to Move and Select or the Number of Your Choice and Enter" \
  15 45 4 \
  1 "Display Hello World" \
  2 "Display Goodbye World" \
  3 "Display Nothing" \
  X "Exit" \
  2>filechoice.txt
}

funcDisplayInputBox () {
  $INPUTBOX --title "$1" --inputbox "$2" "$3" "$4" 2>filetmp.txt
}

# function declarations - stop
#
# script - start
if [ "$1" == "warning" ]; then
#  funcDisplayInfoBox "WARNING!" "We are SHUTTING DOWN the System..." "11" "21" "5"
#  echo "Shutting Down!"
#  
  funcDisplayMsgBox "WARNING!" "SCRIPT WARNING! Please press OK to close window" "10" "20"
  echo "SHUTTING DOWN NOW!!! :) :) :)"
elif [ "$1" == "menu" ]; then
  funcDisplayMenuBox
  
  case "`cat filechoice.txt`" in
    1) echo "Hello World";;
    2) echo "Goodbye World";;
    3) echo "Nothing";;
    X) echo "Exit";;
  esac


elif [ "$1" == "input" ]; then
  funcDisplayInputBox "Display File Name" "Which file in the current directory do you want to display?" "10" "20"
  if [ "`cat filetmp.txt`" != "" ]; then
    cat "`cat filetmp.txt`"
  else
    echo "Nothing to do"
  fi


else
  funcDisplayInfoBox "Information..." "You are not doing anything fun..." "11" "21" "2"
  echo "Not doing anything, back to regular scripting..."
fi
echo ""
echo ""

# cleaning up...
echo "Cleaning up the temp files..."
rm -rf filetmp*.txt
rm -rf filechoice.txt
echo ""
echo ""

## make some pause before exit
sleep 2
clear
==============================
SCRIPT NAME: 7_examples.sh 
==============================
#!/bin/bash
# some complex examples


## 3 Override/trap the system EXIT and execute a custom function
clear
echo "Override/trap the system EXIT and execute a custom function"
echo "============================================================================================"
# with trap we can catch system EXIT signals as well as SIGINT SIGTERM SIGTSTP, as well as commands...
# trap 'command to do when trap event happens' trap_commands trap_signals

# SIGINT - ctrl+c
# SIGTERM - kill command
# SIGTSTP - ctrl+z
# global variables
TMPFILE1="filetmp1.txt"
TMPFILE2="filetmp2.txt"
trap 'funcMyExit' EXIT
# function declarations - start
#
# run this exit instead of the default exit when called
funcMyExit () 
{
  echo "Exit Intercepted..."
  echo "Cleaning up the temp files..."
  rm -rf filetmp*.txt
  exit 255
}
# function declarations - stop
#
# script - start
echo "Write something to tmp file for later use...   " > $TMPFILE1
echo "Write something to tmp file 2 for later user..." > $TMPFILE2
echo "Trying to copy the indicated file before processing..."cp -rf $1 some_file_name.txt 2>/dev/null
if [ "$?" -eq "0" ]; then
  echo "Everything worked out ok..."
else
  echo "I guess it did not work out ok..."
  exit 1  # we will catch this exit and call custom function
fi
# script - stop
echo ""
echo ""



## 4 check the number of arguments passed to the script
## we can use special character "#" that represents the value "number of existing parameters"
echo "check the number of arguments passed to the script v2 - longer variant that gives ability to exit with custom code"
echo "v1 see in previous lessons"
echo "============================================================================================"
if [ "$#" != "3" ]; then 
  echo "USAGE: $0 [parm1] [parm2] [parm3]"
  exit 231
fi
echo "I live! I got what I needed!"


## 5 check the number of arguments passed to the script
## we can use desired number of args that represents the value "number of existing parameters"
echo "check the number of arguments passed to the script v3 - shorter variant"
echo "v2 is higher, v1 see in previous lessons"
echo "============================================================================================"
: ${3?"USAGE: $1 ARGUMENT $2 ARGUMENT $3 ARGUMENT"}
echo "I got all three!"
echo ""
echo ""


## make some pause before exit
echo "press ENTER to exit"
read
==============================
SCRIPT NAME: 8_makedoc.sh 
==============================
#!/bin/bash
# makedoc
# adding more to the top of the result file and making it executable make it self listed documentation file
# more command will list it by screens/pages 

DOCFILE="script_listing"
echo "#!/bin/more" > "$DOCFILE"
ls *.sh > tmplisting.txt
while IFS= read -r FILENAME; do
  if [ -f "$FILENAME" ]; then
    echo "==============================" >> "$DOCFILE"
    echo "SCRIPT NAME: $FILENAME " >> "$DOCFILE"
    echo "==============================" >> "$DOCFILE"
    echo "`cat $FILENAME`" >> "$DOCFILE"
    echo ""
    echo ""
fi
done < tmplisting.txt

chmod 755 "$DOCFILE"
rm -rf tmplisting.txt
echo "$DOCFILE was created"
==============================
SCRIPT NAME: shellexpansion.sh 
==============================
#!/bin/bash
# shall expansions
clear
echo "echo sh{ot,oot,ort} - " sh{ot,oot,ort}
echo "echo st{il,al}l - " st{il,al}l
echo "echo \$HOME == echo ~ - " ~
echo "pwd == echo ~+ - " ~+
echo "old pwd == echo ~- - " ~-
echo ""
echo "print enviroment vars started with HO: echo \"\${!HO*}\": "
echo "${!HO*}" 
echo ""
echo "two variants set and dislay variable at the same time:"
echo "CARNAME=audi && echo \$CARNAME" 
echo "or"
echo "echo \"\${CARNAME:=audi}\":"
echo "${CARNAME:=audi}"
echo ""
echo "fast way to use \"expr\" is: echo \"\$[ 2 * 2 ]\":"
echo "$[ 2 * 2 ]"
# make some pause before exit
echo ""
echo "press ENTER to exit"
read
